import { GoogleGenAI } from "@google/genai";

// Assume process.env.API_KEY is available
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Generates an image for a game card using Gemini.
 * @param cardName The name of the card to use in the prompt.
 * @returns A promise that resolves to a base64 data URL of the generated image.
 */
export const generateImage = async (cardName: string): Promise<string> => {
  try {
    // A detailed prompt for better art style consistency
    const prompt = `Pixel art sprite for a fantasy trading card game character: ${cardName}. 16-bit style, vibrant, high contrast, detailed, full character portrait, centered, on a simple neutral background. no text, no border.`;

    const response = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        // A 3:4 aspect ratio to match the card dimensions
        aspectRatio: '3:4',
        negativePrompt: 'blurry, text, letters, watermark, signature, border, frame, ugly, deformed, noisy, jpeg artifacts, low quality',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error(`Error generating image for prompt "${cardName}":`, error);
    // Fallback to picsum photos if the API fails, so the game can still proceed.
    return `https://picsum.photos/seed/${cardName.replace(/\s+/g, '')}/300/400`;
  }
};